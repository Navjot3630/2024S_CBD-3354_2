logsBucket: gs://bucket897927

steps:
  # Step 1: Build Docker image for the frontend
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/project897927/frontend:latest', './frontend']
    id: 'build-frontend'

  # Step 2: Build Docker image for the backend
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/project897927/backend:latest', './backend']
    id: 'build-backend'
    waitFor:
      - 'build-frontend'

  # Step 3: Push the frontend image to GCR
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/project897927/frontend:latest']
    id: 'push-frontend'
    waitFor:
      - 'build-backend'

  # Step 4: Push the backend image to GCR
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/project897927/backend:latest']
    id: 'push-backend'
    waitFor:
      - 'push-frontend'

  # Step 5: Check if the GKE cluster exists
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if gcloud container clusters describe ${_CLUSTER_NAME} --region ${_REGION} > /dev/null 2>&1; then
          echo "Cluster already exists."
          echo "CLUSTER_EXISTS=true" > /workspace/cluster_status.txt
        else
          echo "Cluster does not exist."
          echo "CLUSTER_EXISTS=false" > /workspace/cluster_status.txt
        fi
    id: 'check-cluster'

  # Step 6: Terraform: Initialize Terraform configuration
  - name: 'hashicorp/terraform:latest'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        source /workspace/cluster_status.txt
        if [ "$CLUSTER_EXISTS" = "false" ]; then
          terraform init
        else
          echo "Skipping Terraform init as the cluster already exists."
        fi
    dir: './terraform'
    id: 'terraform-init'
    waitFor:
      - 'check-cluster'

  # Step 7: Terraform: Apply Terraform configuration
  - name: 'hashicorp/terraform:latest'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        source /workspace/cluster_status.txt
        if [ "$CLUSTER_EXISTS" = "false" ]; then
          terraform apply -auto-approve
        else
          echo "Skipping Terraform apply as the cluster already exists."
        fi
    dir: './terraform'
    id: 'terraform-apply'
    waitFor:
      - 'terraform-init'

  # Step 8: Fetch credentials for the GKE cluster
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        source /workspace/cluster_status.txt
        if [ "$CLUSTER_EXISTS" = "false" ]; then
          gcloud container clusters get-credentials ${_CLUSTER_NAME} --region ${_REGION}
        else
          echo "Cluster already exists, fetching credentials."
          gcloud container clusters get-credentials ${_CLUSTER_NAME} --region ${_REGION}
        fi
    id: 'fetch-gke-credentials'
    env:
      - 'CLOUDSDK_COMPUTE_REGION=${_REGION}'
    waitFor:
      - 'terraform-apply'

  # Step 9: Deploy the frontend application to GKE
  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['apply', '-f', 'frontend/deployment.yaml']
    id: 'deploy-frontend'
    env:
      - 'CLOUDSDK_COMPUTE_REGION=${_REGION}'
      - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLUSTER_NAME}'
    waitFor:
      - 'fetch-gke-credentials'

  # Step 10: Deploy the backend application to GKE
  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['apply', '-f', 'backend/deployment.yaml']
    id: 'deploy-backend'
    env:
      - 'CLOUDSDK_COMPUTE_REGION=${_REGION}'
      - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLUSTER_NAME}'
    waitFor:
      - 'deploy-frontend'

  # Step 11: Expose the frontend deployment with a service
  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['apply', '-f', 'frontend/service.yaml']
    id: 'expose-frontend-service'
    env:
      - 'CLOUDSDK_COMPUTE_REGION=${_REGION}'
      - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLUSTER_NAME}'
    waitFor:
      - 'deploy-backend'

  # Step 12: Expose the backend deployment with a service
  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['apply', '-f', 'backend/service.yaml']
    id: 'expose-backend-service'
    env:
      - 'CLOUDSDK_COMPUTE_REGION=${_REGION}'
      - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLUSTER_NAME}'
    waitFor:
      - 'expose-frontend-service'

images:
  - 'gcr.io/project897927/frontend:latest'
  - 'gcr.io/project897927/backend:latest'

substitutions:
  _REGION: 'us-central1'
  _CLUSTER_NAME: 'chatapp'
