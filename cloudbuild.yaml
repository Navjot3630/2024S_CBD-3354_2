# cloudbuild.yaml

logsBucket: gs://bucket897927  # The Cloud Storage bucket for build logs

substitutions:
  _REGION: ''  # Placeholder for region
  _CLUSTER_NAME: ''  # Placeholder for cluster name

steps:
  # Step 1: Build Docker image for the frontend
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/project897927/frontend:latest', './frontend']
    id: 'build-frontend'

  # Step 2: Build Docker image for the backend
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/project897927/backend:latest', './backend']
    id: 'build-backend'
    waitFor:
      - 'build-frontend'

  # Step 3: Push the frontend image to GCR
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/project897927/frontend:latest']
    id: 'push-frontend'
    waitFor:
      - 'build-backend'

  # Step 4: Push the backend image to GCR
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/project897927/backend:latest']
    id: 'push-backend'
    waitFor:
      - 'push-frontend'

  # Step 5: Apply Terraform configuration and extract outputs
  - name: 'hashicorp/terraform:latest'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        # Initialize Terraform and apply configuration
        terraform init
        terraform apply -auto-approve

        # Extract outputs from Terraform
        REGION=$(terraform output -raw region)
        CLUSTER_NAME=$(terraform output -raw cluster_name)
        echo "REGION=${REGION}" >> $BUILD_ENV_FILE
        echo "CLUSTER_NAME=${CLUSTER_NAME}" >> $BUILD_ENV_FILE
    id: 'terraform-apply'
    env:
      - 'BUILD_ENV_FILE=/workspace/env_vars.txt'
    waitFor:
      - 'push-backend'

  # Step 6: Set environment variables for the region and cluster name
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        source /workspace/env_vars.txt
        echo "CLOUDSDK_COMPUTE_REGION=${REGION}" >> /workspace/env_vars.txt
        echo "CLOUDSDK_CONTAINER_CLUSTER=${CLUSTER_NAME}" >> /workspace/env_vars.txt
    id: 'set-env-vars'
    waitFor:
      - 'terraform-apply'

  # Step 7: Extract cluster credentials
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        source /workspace/env_vars.txt
        gcloud container clusters get-credentials "${CLUSTER_NAME}" --region "${REGION}"
    id: 'get-credentials'
    waitFor:
      - 'set-env-vars'

  # Step 8: Deploy the frontend application to GKE
  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['apply', '-f', 'frontend/deployment.yaml']
    id: 'deploy-frontend'
    env:
      - 'CLOUDSDK_COMPUTE_REGION=${REGION}'
      - 'CLOUDSDK_CONTAINER_CLUSTER=${CLUSTER_NAME}'
    waitFor:
      - 'get-credentials'

  # Step 9: Deploy the backend application to GKE
  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['apply', '-f', 'backend/deployment.yaml']
    id: 'deploy-backend'
    env:
      - 'CLOUDSDK_COMPUTE_REGION=${REGION}'
      - 'CLOUDSDK_CONTAINER_CLUSTER=${CLUSTER_NAME}'
    waitFor:
      - 'deploy-frontend'

  # Step 10: Expose the frontend deployment with a service
  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['apply', '-f', 'frontend/service.yaml']
    id: 'expose-frontend-service'
    env:
      - 'CLOUDSDK_COMPUTE_REGION=${REGION}'
      - 'CLOUDSDK_CONTAINER_CLUSTER=${CLUSTER_NAME}'
    waitFor:
      - 'deploy-backend'

  # Step 11: Expose the backend deployment with a service
  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['apply', '-f', 'backend/service.yaml']
    id: 'expose-backend-service'
    env:
      - 'CLOUDSDK_COMPUTE_REGION=${REGION}'
      - 'CLOUDSDK_CONTAINER_CLUSTER=${CLUSTER_NAME}'
    waitFor:
      - 'expose-frontend-service'

images:
  - 'gcr.io/project897927/frontend:latest'
  - 'gcr.io/project897927/backend:latest'
