logsBucket: gs://bucket897927

substitutions:
  _REGION: 'us-central1'  # Default region, can be overridden in the trigger
  _CLUSTER_NAME: 'chatapp'  # Default cluster name, can be overridden in the trigger

steps:
  # Step 1: Build Docker image for the frontend
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/project897927/frontend:latest', './frontend']
    id: 'build-frontend'

  # Step 2: Build Docker image for the backend
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/project897927/backend:latest', './backend']
    id: 'build-backend'
    waitFor:
      - 'build-frontend'

  # Step 3: Push the frontend image to GCR
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/project897927/frontend:latest']
    id: 'push-frontend'
    waitFor:
      - 'build-backend'

  # Step 4: Push the backend image to GCR
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/project897927/backend:latest']
    id: 'push-backend'
    waitFor:
      - 'push-frontend'

  # Step 5: Check if the GKE cluster exists
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if gcloud container clusters describe "${_CLUSTER_NAME}" --region "${_REGION}" > /dev/null 2>&1; then
          echo "Cluster already exists."
          exit 0
        else
          echo "Cluster does not exist."
          exit 1
        fi
    id: 'check-cluster'
    waitFor:
      - 'push-backend'
    # Set to fail the build if the cluster does not exist, so the Terraform step runs only if the cluster is missing
    # A non-zero exit code will skip the subsequent steps if the cluster does not exist.

  # Step 6: Apply Terraform configuration if the cluster does not exist
  - name: 'hashicorp/terraform:latest'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Running Terraform apply."
        cd terraform
        terraform init
        terraform apply -auto-approve
    id: 'terraform-apply'
    waitFor:
      - 'check-cluster'
    # Only runs if the previous check-cluster step fails (i.e., the cluster does not exist)

  # Step 7: Extract cluster credentials
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud container clusters get-credentials "${_CLUSTER_NAME}" --region "${_REGION}"
    id: 'get-credentials'
    waitFor:
      - 'check-cluster'
      - 'terraform-apply'
    # Runs after both the check-cluster and terraform-apply steps

  # Step 8: Deploy the frontend application to GKE
  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['apply', '-f', 'frontend/deployment.yaml']
    id: 'deploy-frontend'
    env:
      - 'CLOUDSDK_COMPUTE_REGION=${_REGION}'
      - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLUSTER_NAME}'
    waitFor:
      - 'get-credentials'

  # Step 9: Deploy the backend application to GKE
  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['apply', '-f', 'backend/deployment.yaml']
    id: 'deploy-backend'
    env:
      - 'CLOUDSDK_COMPUTE_REGION=${_REGION}'
      - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLUSTER_NAME}'
    waitFor:
      - 'deploy-frontend'

  # Step 10: Expose the frontend deployment with a service
  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['apply', '-f', 'frontend/service.yaml']
    id: 'expose-frontend-service'
    env:
      - 'CLOUDSDK_COMPUTE_REGION=${_REGION}'
      - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLUSTER_NAME}'
    waitFor:
      - 'deploy-backend'

  # Step 11: Expose the backend deployment with a service
  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['apply', '-f', 'backend/service.yaml']
    id: 'expose-backend-service'
    env:
      - 'CLOUDSDK_COMPUTE_REGION=${_REGION}'
      - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLUSTER_NAME}'
    waitFor:
      - 'expose-frontend-service'

images:
  - 'gcr.io/project897927/frontend:latest'
  - 'gcr.io/project897927/backend:latest'
