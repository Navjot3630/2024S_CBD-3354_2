logsBucket: gs://bucket897927

steps:
  # Step 1: Build Docker image for the frontend
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/project897927/frontend:latest', './frontend']
    id: 'build-frontend'

  # Step 2: Build Docker image for the backend
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/project897927/backend:latest', './backend']
    id: 'build-backend'
    waitFor:
      - 'build-frontend'

  # Step 3: Push the frontend image to GCR
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/project897927/frontend:latest']
    id: 'push-frontend'
    waitFor:
      - 'build-backend'

  # Step 4: Push the backend image to GCR
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/project897927/backend:latest']
    id: 'push-backend'
    waitFor:
      - 'push-frontend'

  # Step 5: Extract variables from terraform.tfvars, check if the GKE cluster exists and apply Terraform if needed
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if gcloud container clusters describe "$CLUSTER_NAME" --region "$REGION" > /dev/null 2>&1; then
          echo "Cluster already exists."
        else
          echo "Cluster does not exist."
          echo "Running Terraform apply."
          cd terraform
          terraform init
          terraform apply -auto-approve
        fi

        # Fetch cluster credentials regardless of whether the cluster was just created or already existed
        gcloud container clusters get-credentials "$CLUSTER_NAME" --region "$REGION"
    id: 'check-and-apply'
    waitFor:
      - 'push-backend'

  # Step 6: Deploy the frontend application to GKE
  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['apply', '-f', 'frontend/deployment.yaml']
    id: 'deploy-frontend'
    env:
      - 'CLOUDSDK_COMPUTE_REGION=${REGION}'
      - 'CLOUDSDK_CONTAINER_CLUSTER=${CLUSTER_NAME}'
    waitFor:
      - 'check-and-apply'

  # Step 7: Deploy the backend application to GKE
  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['apply', '-f', 'backend/deployment.yaml']
    id: 'deploy-backend'
    env:
      - 'CLOUDSDK_COMPUTE_REGION=${REGION}'
      - 'CLOUDSDK_CONTAINER_CLUSTER=${CLUSTER_NAME}'
    waitFor:
      - 'deploy-frontend'

  # Step 8: Expose the frontend deployment with a service
  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['apply', '-f', 'frontend/service.yaml']
    id: 'expose-frontend-service'
    env:
      - 'CLOUDSDK_COMPUTE_REGION=${REGION}'
      - 'CLOUDSDK_CONTAINER_CLUSTER=${CLUSTER_NAME}'
    waitFor:
      - 'deploy-backend'

  # Step 9: Expose the backend deployment with a service
  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['apply', '-f', 'backend/service.yaml']
    id: 'expose-backend-service'
    env:
      - 'CLOUDSDK_COMPUTE_REGION=${REGION}'
      - 'CLOUDSDK_CONTAINER_CLUSTER=${CLUSTER_NAME}'
    waitFor:
      - 'expose-frontend-service'

images:
  - 'gcr.io/project897927/frontend:latest'
  - 'gcr.io/project897927/backend:latest'
